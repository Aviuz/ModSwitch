// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Diagnostics.CodeAnalysis;

namespace DoctorVanGogh.ModSwitch {
    [GeneratedCode("DefGenerator.tt","0.1")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
	public static partial class LanguageKeys {
		public static class @keyed {
			/// <summary>
			/// Get's the translation key for '<em>ModSwitch</em>'
			/// </summary>
			public const string @ModSwitch = "ModSwitch";
			/// <summary>
			/// Get's the translation key for '<em>Save current mod set</em>'
			/// </summary>
			public const string @ModSwitch_Tip_Create = "ModSwitch.Tip.Create";
			/// <summary>
			/// Get's the translation key for '<em>Delete</em>'
			/// </summary>
			public const string @ModSwitch_Tip_Delete = "ModSwitch.Tip.Delete";
			/// <summary>
			/// Get's the translation key for '<em>Rename</em>'
			/// </summary>
			public const string @ModSwitch_Tip_Rename = "ModSwitch.Tip.Rename";
			/// <summary>
			/// Get's the translation key for '<em>Settings</em>'
			/// </summary>
			public const string @ModSwitch_Tip_Settings = "ModSwitch.Tip.Settings";
			/// <summary>
			/// Get's the translation key for '<em>Undo</em>'
			/// </summary>
			public const string @ModSwitch_Tip_Undo = "ModSwitch.Tip.Undo";
			/// <summary>
			/// Get's the translation key for '<em>Apply mod set</em>'
			/// </summary>
			public const string @ModSwitch_Tip_Apply = "ModSwitch.Tip.Apply";
			/// <summary>
			/// Get's the translation key for '<em>Import</em>'
			/// </summary>
			public const string @ModSwitch_Import = "ModSwitch.Import";
			/// <summary>
			/// Get's the translation key for '<em>{0} items</em>'
			/// </summary>
			public const string @ModSwitch_ModSet_Mods = "ModSwitch.ModSet.Mods";
			/// <summary>
			/// Get's the translation key for '<em>Really delete {0}?</em>'
			/// </summary>
			public const string @ModSwitch_ModSet_ConfirmDelete = "ModSwitch.ModSet.ConfirmDelete";
			/// <summary>
			/// Get's the translation key for '<em>Confirmation needed</em>'
			/// </summary>
			public const string @ModSwitch_Confirmation_Title = "ModSwitch.Confirmation.Title";
			/// <summary>
			/// Get's the translation key for '<em>Missing mods</em>'
			/// </summary>
			public const string @ModSwitch_MissingMods_Title = "ModSwitch.MissingMods.Title";
			/// <summary>
			/// Get's the translation key for '<em>Some mods from {0} are not currently installed:</em>'
			/// </summary>
			public const string @ModSwitch_MissingMods = "ModSwitch.MissingMods";
			/// <summary>
			/// Get's the translation key for '<em>Ignore</em>'
			/// </summary>
			public const string @ModSwitch_MissingMods_Choice_Ignore = "ModSwitch.MissingMods.Choice.Ignore";
			/// <summary>
			/// Get's the translation key for '<em>Ignore the missing mods.</em>'
			/// </summary>
			public const string @ModSwitch_MissingMods_Choice_Ignore_Tip = "ModSwitch.MissingMods.Choice.Ignore.Tip";
			/// <summary>
			/// Get's the translation key for '<em>Cancel & Open workshop</em>'
			/// </summary>
			public const string @ModSwitch_MissingMods_Choice_Workshop = "ModSwitch.MissingMods.Choice.Workshop";
			/// <summary>
			/// Get's the translation key for '<em>Dont apply the Mod Set. Instead try retrieving applicable mods from the Steam Workshop. Keep in mind those mods might no longer be available.</em>'
			/// </summary>
			public const string @ModSwitch_MissingMods_Choice_Workshop_Tip = "ModSwitch.MissingMods.Choice.Workshop.Tip";
			/// <summary>
			/// Get's the translation key for '<em>Remove from Set</em>'
			/// </summary>
			public const string @ModSwitch_MissingMods_Choice_Remove = "ModSwitch.MissingMods.Choice.Remove";
			/// <summary>
			/// Get's the translation key for '<em>Remove the missing mods from the stored Mod Set.</em>'
			/// </summary>
			public const string @ModSwitch_MissingMods_Choice_Remove_Tip = "ModSwitch.MissingMods.Choice.Remove.Tip";
			/// <summary>
			/// Get's the translation key for '<em>New mod set</em>'
			/// </summary>
			public const string @ModSwitch_Create_DefaultName = "ModSwitch.Create.DefaultName";
			/// <summary>
			/// Get's the translation key for '<em>Do you want to append the imported sets or replace all existing sets?</em>'
			/// </summary>
			public const string @ModSwitch_Import_Text = "ModSwitch.Import.Text";
			/// <summary>
			/// Get's the translation key for '<em>Replace</em>'
			/// </summary>
			public const string @ModSwitch_Import_Choice_Replace = "ModSwitch.Import.Choice.Replace";
			/// <summary>
			/// Get's the translation key for '<em>Append</em>'
			/// </summary>
			public const string @ModSwitch_Import_Choice_Append = "ModSwitch.Import.Choice.Append";
			/// <summary>
			/// Get's the translation key for '<em>Color...</em>'
			/// </summary>
			public const string @ModSwitch_Color = "ModSwitch.Color";
			/// <summary>
			/// Get's the translation key for '<em>white</em>'
			/// </summary>
			public const string @ModSwitch_Color_white = "ModSwitch.Color.white";
			/// <summary>
			/// Get's the translation key for '<em>black</em>'
			/// </summary>
			public const string @ModSwitch_Color_black = "ModSwitch.Color.black";
			/// <summary>
			/// Get's the translation key for '<em>gray</em>'
			/// </summary>
			public const string @ModSwitch_Color_gray = "ModSwitch.Color.gray";
			/// <summary>
			/// Get's the translation key for '<em>red</em>'
			/// </summary>
			public const string @ModSwitch_Color_red = "ModSwitch.Color.red";
			/// <summary>
			/// Get's the translation key for '<em>green</em>'
			/// </summary>
			public const string @ModSwitch_Color_green = "ModSwitch.Color.green";
			/// <summary>
			/// Get's the translation key for '<em>blue</em>'
			/// </summary>
			public const string @ModSwitch_Color_blue = "ModSwitch.Color.blue";
			/// <summary>
			/// Get's the translation key for '<em>magenta</em>'
			/// </summary>
			public const string @ModSwitch_Color_magenta = "ModSwitch.Color.magenta";
			/// <summary>
			/// Get's the translation key for '<em>cyan</em>'
			/// </summary>
			public const string @ModSwitch_Color_cyan = "ModSwitch.Color.cyan";
			/// <summary>
			/// Get's the translation key for '<em>yellow</em>'
			/// </summary>
			public const string @ModSwitch_Color_yellow = "ModSwitch.Color.yellow";
			/// <summary>
			/// Get's the translation key for '<em>Create a local copy</em>'
			/// </summary>
			public const string @ModSwitch_CopyLocal = "ModSwitch.CopyLocal";
			/// <summary>
			/// Get's the translation key for '<em>Steam currently not running/available</em>'
			/// </summary>
			public const string @ModSwitch_Error_SteamNotRunning = "ModSwitch.Error.SteamNotRunning";
			/// <summary>
			/// Get's the translation key for '<em>There are already stored settings for the mod under the new name {0}. You can confirm overwriting the existing settings or skip copying settings.</em>'
			/// </summary>
			public const string @ModSwitch_ExistingSettings = "ModSwitch.ExistingSettings";
			/// <summary>
			/// Get's the translation key for '<em>Overwrite.</em>'
			/// </summary>
			public const string @ModSwitch_ExistingSettings_Choice_Overwrite = "ModSwitch.ExistingSettings.Choice.Overwrite";
			/// <summary>
			/// Get's the translation key for '<em>Skip.</em>'
			/// </summary>
			public const string @ModSwitch_ExistingSettings_Choice_Skip = "ModSwitch.ExistingSettings.Choice.Skip";
			/// <summary>
			/// Get's the translation key for '<em>Contains invalid characters</em>'
			/// </summary>
			public const string @ModSwitch_Error_InvalidChars = "ModSwitch.Error.InvalidChars";
			/// <summary>
			/// Get's the translation key for '<em>Target already exists</em>'
			/// </summary>
			public const string @ModSwitch_Error_TargetExists = "ModSwitch.Error.TargetExists";
			/// <summary>
			/// Get's the translation key for '<em>Copied mod {0} to {1}.</em>'
			/// </summary>
			public const string @ModSwitch_CopyLocal_Result_Copy = "ModSwitch.CopyLocal.Result.Copy";
			/// <summary>
			/// Get's the translation key for '<em>Copied {0} settings file(s).</em>'
			/// </summary>
			public const string @ModSwitch_CopyLocal_Result_Settings = "ModSwitch.CopyLocal.Result.Settings";
			/// <summary>
			/// Get's the translation key for '<em>Skipped copying settings.</em>'
			/// </summary>
			public const string @ModSwitch_CopyLocal_Result_Skipped = "ModSwitch.CopyLocal.Result.Skipped";
			/// <summary>
			/// Get's the translation key for '<em>Move to...</em>'
			/// </summary>
			public const string @ModSwitch_MoveTo = "ModSwitch.MoveTo";
			/// <summary>
			/// Get's the translation key for '<em>Top</em>'
			/// </summary>
			public const string @ModSwitch_MoveTo_Top = "ModSwitch.MoveTo.Top";
			/// <summary>
			/// Get's the translation key for '<em>Bottom</em>'
			/// </summary>
			public const string @ModSwitch_MoveTo_Bottom = "ModSwitch.MoveTo.Bottom";
		}
	}
}
