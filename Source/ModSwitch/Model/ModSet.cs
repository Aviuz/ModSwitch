using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Harmony;
using UnityEngine;
using Verse;

namespace DoctorVanGogh.ModSwitch {
    class ModSet : IExposable {
        private static readonly FieldInfo fiModsConfig_data;
        private static readonly FieldInfo fiModsConfigData_activeMods;
        private static readonly FieldInfo fiModsConfigData_buildNumber;
        private static TipSignal? _renameTip;
        private static TipSignal? _deleteTip;


        private TipSignal? _modsTip;
        public bool AutoGenerated;
        public int BuildNumber = -1;

        public List<string> Mods = new List<string>();
        public string Name = String.Empty;

        static ModSet() {
            var tModsConfig = typeof(ModsConfig);
            var tModsConfigData = AccessTools.Inner(tModsConfig, @"ModsConfigData");
            fiModsConfigData_activeMods = AccessTools.Field(tModsConfigData, @"activeMods");
            fiModsConfigData_buildNumber = AccessTools.Field(tModsConfigData, @"buildNumber");
            fiModsConfig_data = AccessTools.Field(tModsConfig, @"data");

        }

        private TipSignal Tip => (_modsTip ?? (_modsTip = new TipSignal(ToString()))).Value;
        private static TipSignal Rename => (_renameTip ?? (_renameTip = new TipSignal(LanguageKeys.keyed.ModSwitch_Tip_Rename.Translate()))).Value;
        private static TipSignal Delete => (_deleteTip ?? (_deleteTip = new TipSignal(LanguageKeys.keyed.ModSwitch_Tip_Delete.Translate()))).Value;

        public void ExposeData() {
            Scribe_Collections.Look(ref Mods, false, @"mods");
            Scribe_Values.Look(ref Name, @"name");
            Scribe_Values.Look(ref BuildNumber, @"buildNumber");
            Scribe_Values.Look(ref AutoGenerated, @"autoGenerated", false);
        }


        public override string ToString() {
            return Mods.Aggregate(new StringBuilder(), (sb, m) => sb.Length == 0 ? sb.Append(m) : sb.AppendFormat(@", {0}", m), sb => sb.ToString());
        }

        public void DoWindowContents(Rect rect) {
            const float padding = 2f;
            var height = rect.height;
            var buttonSize = height - 2*padding;

            var leftColumnsWidth = rect.width - 8*padding - 2*buttonSize;

            var left = new Rect(rect.x, rect.y + padding, leftColumnsWidth*0.6f - padding, buttonSize);
            Widgets.Label(left, Name);

            var right = new Rect(rect.x + leftColumnsWidth*0.6f + 3*padding, rect.y + padding, leftColumnsWidth*0.4f, buttonSize);
            Widgets.Label(right, LanguageKeys.keyed.ModSwitch_ModSet_Mods.Translate(Mods.Count));
            TooltipHandler.TipRegion(right, Tip);

            var rctRename = new Rect(rect.x + leftColumnsWidth + 5*padding, rect.y + padding, buttonSize, buttonSize);

            if (ExtraWidgets.ButtonImage(rctRename, Assets.Edit, false, Rename, rctRename.ContractedBy(4)))
                Find.WindowStack.Add(
                        new Dialog_SetText(
                            s => {
                                Name = s;
                                LoadedModManager.GetMod<ModSwitch>().WriteSettings();
                            },
                            Name)
                    );

            var rctDelete = new Rect(rect.x + leftColumnsWidth + 7*padding + buttonSize, rect.y + padding, buttonSize, buttonSize);


            if (ExtraWidgets.ButtonImage(rctDelete, Assets.Delete, false, Delete, rctDelete.ContractedBy(4)))
                Find.WindowStack.Add(
                        Dialog_MessageBox.CreateConfirmation(
                            LanguageKeys.keyed.ModSwitch_ModSet_ConfirmDelete.Translate(Name),
                            () => {
                                LoadedModManager.GetMod<ModSwitch>().DeleteSet(this);
                            },
                            true,
                            LanguageKeys.keyed.ModSwitch_Confirmation_Title.Translate()));
        }

        public void Apply() {
            // TODO: improve performance, dont do multiple joins over same data...

            // join set with installed mods while perserving order from set
            List<string> installedMods = Mods
                .Select((m, idx) => new {id = m, Index = idx})
                .Join(ModLister.AllInstalledMods, t => t.id, md => md.Identifier, (t, md) => new {Id = t.id, t.Index})
                .OrderBy(t => t.Index)
                .Select(t => t.Id)
                .ToList();

            fiModsConfigData_activeMods.SetValue(fiModsConfig_data.GetValue(null), new List<string>(installedMods));

            if (installedMods.Count != Mods.Count) {
                var missingMods = Mods.Where(m => !installedMods.Contains(m));
                StringBuilder sb = new StringBuilder($"Some mods from {Name} are not currently installed:");
                sb.AppendLine();
                sb.AppendLine();
                foreach (var item in missingMods) sb.AppendLine($" - {item}");

                Find.WindowStack.Add(new Dialog_MessageBox(sb.ToString(), title:  LanguageKeys.keyed.ModSwitch_MissingMods_Title.Translate()));
            }
        }

        public static ModSet FromCurrent(string name) {
            object modsConfigData = fiModsConfig_data.GetValue(null);

            return new ModSet {
                       Name = name,
                       BuildNumber = (int) fiModsConfigData_buildNumber.GetValue(modsConfigData),
                       Mods = new List<string>((IEnumerable<string>) fiModsConfigData_activeMods.GetValue(modsConfigData))
                   };
        }
    }
}
